"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Sparkles } from "lucide-react"

// –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å –∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ (–Ω–æ–≤—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ)
const slotItems = [
  { symbol: "üêñ", multiplier: 50 }, // Pig - —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
  { symbol: "üê∏", multiplier: 20 }, // Frog
  { symbol: "ü¶ç", multiplier: 10 }, // Ape
  { symbol: "üëΩ", multiplier: 8 }, // Alien
  { symbol: "üêç", multiplier: 6 }, // Snake
  { symbol: "ü¶ñ", multiplier: 4 }, // Dino
  { symbol: "üêã", multiplier: 2 }, // Whale
]

interface SlotsGameProps {
  updateBalance: (amount: number) => void
  balance: number
}

export default function SlotsGame({ updateBalance, balance }: SlotsGameProps) {
  const [reels, setReels] = useState<string[]>(["‚ùì", "‚ùì", "‚ùì"])
  const [spinning, setSpinning] = useState(false)
  const [bet, setBet] = useState(10)
  const [lastWin, setLastWin] = useState(0)
  const [spinResult, setSpinResult] = useState<"win" | "lose" | null>(null)
  const [spinHistory, setSpinHistory] = useState<Array<{ result: "win" | "lose"; amount: number }>>([])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
  const getRandomSymbol = () => {
    // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è—Ö
    // –ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º —Ä–µ–∂–µ –≤—ã–ø–∞–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª
    const weights = [1, 3, 6, 10, 20, 40, 80]
    const totalWeight = weights.reduce((a, b) => a + b, 0)

    const random = Math.random() * totalWeight
    let weightSum = 0

    for (let i = 0; i < weights.length; i++) {
      weightSum += weights[i]
      if (random <= weightSum) {
        return slotItems[i].symbol
      }
    }

    return slotItems[slotItems.length - 1].symbol
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
  const spin = () => {
    if (spinning || balance < bet) return

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    updateBalance(-bet)

    setSpinning(true)
    setSpinResult(null)
    setReels(["‚ùì", "‚ùì", "‚ùì"])

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    let spinCount = 0
    const maxSpins = 20
    const spinInterval = setInterval(() => {
      setReels([getRandomSymbol(), getRandomSymbol(), getRandomSymbol()])
      spinCount++

      if (spinCount >= maxSpins) {
        clearInterval(spinInterval)

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º getRandomSymbol, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —à–∞–Ω—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        const finalReels = [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()]

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        // –ò–Ω–æ–≥–¥–∞ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–º–∏
        if (Math.random() < 0.3) {
          // –í 30% —Å–ª—É—á–∞–µ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
          const randomReel = Math.floor(Math.random() * 3)
          let differentSymbol
          do {
            differentSymbol = getRandomSymbol()
          } while (differentSymbol === finalReels[0])

          finalReels[randomReel] = differentSymbol
        }

        setReels(finalReels)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        checkWin(finalReels)

        setSpinning(false)
      }
    }, 100)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
  const checkWin = (currentReels: string[]) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–¥–∂–µ–∫–ø–æ—Ç)
    if (currentReels[0] === currentReels[1] && currentReels[1] === currentReels[2]) {
      const symbol = currentReels[0]
      const item = slotItems.find((item) => item.symbol === symbol)

      if (item) {
        const winAmount = bet * item.multiplier
        updateBalance(winAmount)
        setLastWin(winAmount)
        setSpinResult("win")
        setSpinHistory((prev) => [...prev, { result: "win", amount: winAmount }].slice(-10))
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
    // –î–µ–ª–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏ —Å –º–µ–Ω—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    else if (
      (currentReels[0] === currentReels[1] ||
        currentReels[1] === currentReels[2] ||
        currentReels[0] === currentReels[2]) &&
      Math.random() < 0.6 // –¢–æ–ª—å–∫–æ 60% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–∞–∂–µ –ø—Ä–∏ –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ) {
      let symbol
      if (currentReels[0] === currentReels[1]) symbol = currentReels[0]
      else if (currentReels[1] === currentReels[2]) symbol = currentReels[1]
      else symbol = currentReels[0]

      const item = slotItems.find((item) => item.symbol === symbol)

      if (item) {
        // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –¥–≤—É—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const winAmount = Math.floor(bet * (item.multiplier / 3))
        updateBalance(winAmount)
        setLastWin(winAmount)
        setSpinResult("win")
        setSpinHistory((prev) => [...prev, { result: "win", amount: winAmount }].slice(-10))
      }
    } else {
      setLastWin(0)
      setSpinResult("lose")
      setSpinHistory((prev) => [...prev, { result: "lose", amount: 0 }].slice(-10))
    }
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
  const changeBet = (amount: number) => {
    const newBet = bet + amount
    if (newBet >= 10 && newBet <= 100) {
      setBet(newBet)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    setReels([getRandomSymbol(), getRandomSymbol(), getRandomSymbol()])
  }, [])

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-lg font-bold text-[#ff1493]">Oink & Spin</h3>
        <div className="text-sm">
          Bet: <span className="font-bold">{bet} OINK</span>
        </div>
      </div>

      {/* –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ */}
      <Card className="bg-black border-[#ff00ff]/30">
        <CardContent className="p-4">
          <div className="flex justify-center gap-2 mb-4">
            {reels.map((symbol, index) => (
              <div
                key={index}
                className={`w-16 h-16 flex items-center justify-center text-3xl bg-gradient-to-b from-[#ff1493]/20 to-[#ff1493]/5 rounded-lg border border-[#ff1493]/30 ${
                  spinning ? "animate-pulse" : ""
                }`}
              >
                {symbol}
              </div>
            ))}
          </div>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          {spinResult && (
            <div className={`text-center mb-4 ${spinResult === "win" ? "text-green-500" : "text-red-500"}`}>
              {spinResult === "win" ? (
                <div className="flex items-center justify-center gap-1">
                  <Sparkles className="h-4 w-4" />
                  <span>Win: {lastWin} OINK!</span>
                  <Sparkles className="h-4 w-4" />
                </div>
              ) : (
                <span>Try again!</span>
              )}
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex justify-center gap-2 mb-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => changeBet(-10)}
              disabled={bet <= 10 || spinning}
              className="border-[#ff1493]/30 text-[#ff1493] hover:bg-[#ff1493]/10"
            >
              -10
            </Button>
            <Button
              className="bg-[#ff1493] hover:bg-[#ff1493]/80 min-w-[120px]"
              disabled={spinning || balance < bet}
              onClick={spin}
            >
              {spinning ? "Spinning..." : "Spin!"}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => changeBet(10)}
              disabled={bet >= 100 || spinning}
              className="border-[#ff1493]/30 text-[#ff1493] hover:bg-[#ff1493]/10"
            >
              +10
            </Button>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–∞—Ö */}
          <div className="grid grid-cols-2 gap-2 text-xs">
            <div className="bg-[#ff1493]/10 p-2 rounded">
              <div className="font-bold mb-1">Winning combinations:</div>
              <div className="space-y-1">
                <div>3 identical: x2-x50</div>
                <div>2 identical: small chance of x1-x16</div>
              </div>
            </div>
            <div className="bg-[#ff1493]/10 p-2 rounded">
              <div className="font-bold mb-1">Best symbols:</div>
              <div className="space-y-1">
                <div>üêñ - x50 (Pig)</div>
                <div>üê∏ - x20 (Frog)</div>
                <div>ü¶ç - x10 (Ape)</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–ø–∏–Ω–æ–≤ */}
      {spinHistory.length > 0 && (
        <div className="mt-4">
          <h4 className="text-sm font-medium mb-2">Spin history:</h4>
          <div className="flex flex-wrap gap-1">
            {spinHistory.map((spin, index) => (
              <div
                key={index}
                className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${
                  spin.result === "win"
                    ? "bg-green-500/20 text-green-500 border border-green-500/30"
                    : "bg-red-500/20 text-red-500 border border-red-500/30"
                }`}
              >
                {spin.result === "win" ? "W" : "L"}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}
